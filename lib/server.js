// Generated by CoffeeScript 1.6.2
var chokidar, client, events, fs, http, http_server_on, interval, make_time, notify_reload, path, revive, started, time_stamp, ws, ws_server_on,
  __slice = [].slice;

events = require("events");

ws = require("ws");

http = require("http");

path = require("path");

fs = require("fs");

chokidar = require("chokidar");

client = path.join(__dirname, 'client.js');

interval = 600;

revive = 4000;

exports.rain = new events.EventEmitter();

ws_server_on = function(port) {
  var WebSocketServer, wss;

  WebSocketServer = require('ws').Server;
  wss = new WebSocketServer({
    port: port,
    host: '0.0.0.0'
  });
  return wss.on('connection', function(ws) {
    var reload;

    reload = function() {
      return ws.send("reload");
    };
    exports.rain.on("reload", reload);
    return ws.on('close', function() {
      return exports.rain.removeListener("reload", reload);
    });
  });
};

http_server_on = function(http_port, ws_port) {
  var app;

  app = http.createServer(function(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/javascript'
    });
    return fs.readFile(client, "utf8", function(err, content) {
      if (err) {
        throw err;
      }
      content = content.replace("7776", ws_port).replace("4000", revive);
      return res.end(content);
    });
  });
  return app.listen(http_port);
};

started = false;

exports.rain.on("server", function(data) {
  var http_port, ws_port;

  data = data || {};
  if (!started) {
    started = true;
    http_port = data.http || 7777;
    ws_port = data.ws || 7776;
    if (data.interval != null) {
      interval = data.interval;
    }
    if (data.revive != null) {
      revive = data.revive;
    }
    http_server_on(http_port, ws_port);
    ws_server_on(ws_port);
    return exports.rain.emit("started");
  }
});

make_time = function() {
  return (new Date).getTime();
};

time_stamp = make_time();

notify_reload = function() {
  var time;

  time = make_time();
  if ((time - time_stamp) > interval) {
    return exports.rain.emit("reload");
  }
};

exports.rain.on("watch", function() {
  var path_names;

  path_names = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return path_names.forEach(function(path_name) {
    var watcher;

    watcher = chokidar.watch(path_name);
    watcher.on("change", notify_reload);
    return exports.rain.emit("watched", path_name);
  });
});
